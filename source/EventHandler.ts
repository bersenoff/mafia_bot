import TelegramBot from 'node-telegram-bot-api';
import Sequelize from "./Models";
import sequelize = require('sequelize');

export default class EventHandler {
    bot: TelegramBot;
    user: any;

    constructor(bot: TelegramBot) {
        this.bot = bot;
        this.user = Sequelize.models.user;
    }

    /**
     * states: 0 - –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, 1 - –≤ –∏–≥—Ä–µ
     * roles: 0 - –º–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å, 1 - –º–∞—Ñ–∏—è, 2 - –∫–æ–º–∏—Å—Å–∞—Ä, 3 - –≤—Ä–∞—á
     */

    public listen() {
        // –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
        this.bot.onText(/\/start/, (data: TelegramBot.Message) => {
            this.user.findOrCreate({
                where: {
                    telegram_id: data.from.id
                },
                defaults: {
                    first_name: data.from.first_name,
                    last_name: data.from.last_name,
                    username: data.from.username
                }
            }).spread((user: any, created: boolean) => {
                if (created) {
                    this.bot.sendMessage(data.from.id, `–î–æ–±—Ä—ã–π –¥–µ–Ω—å, ${data.from.first_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ üòä`);
                } else {
                    this.bot.sendMessage(data.from.id, `–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${data.from.first_name}!`);
                }

                this.bot.sendMessage(data.from.id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ò–≥—Ä–∞—Ç—å\", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É üòä", {
                    reply_markup: {
                        keyboard: [
                            [{
                                text: "–ò–≥—Ä–∞—Ç—å"
                            }]
                        ],
                        resize_keyboard: true,
                        one_time_keyboard: true
                    }
                });
            });
        });

        // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ–¥—É—â–µ–≥–æ
        this.bot.onText(/\/lead/, (data: TelegramBot.Message) => {
            this.bot.sendMessage(data.from.id, "–ù–∞–∂–º–∏—Ç–µ \"–ù–∞—á–∞—Ç—å\", —á—Ç–æ–±—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–æ–ª–∏, –∫–æ–≥–¥–∞ –≤—Å–µ –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã üòä", {
                reply_markup: {
                    keyboard: [
                        [{
                            text: "–ù–∞—á–∞—Ç—å"
                        }]
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: true
                }
            });
        });

        // –°–±—Ä–æ—Å –∏–≥—Ä–æ–∫–æ–≤
        this.bot.onText(/\/reset/, (data: TelegramBot.Message) => {
            this.user.findAll({
                where: {
                    state: 1
                }
            }).then((users: any) => {
                for (let user of users) {
                    user.update({
                        state: 0,
                        role: 0
                    });

                    this.bot.sendMessage(user.telegram_id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ò–≥—Ä–∞—Ç—å\", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É üòä", {
                        reply_markup: {
                            keyboard: [
                                [{
                                    text: "–ò–≥—Ä–∞—Ç—å"
                                }]
                            ],
                            resize_keyboard: true,
                            one_time_keyboard: true
                        }
                    });
                }

                this.bot.sendMessage(data.from.id, "–ò–≥—Ä–æ–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã ))");
            });
        });

        // –ü–∞—Å—Ö–∞–ª–∫–∞
        this.bot.onText(/\/egg/, (data: TelegramBot.Message) => {
            this.sendPlayers("–ò–ª—å—è —á–º–æ üòä");
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ reply_keyboard
        this.bot.on("message", (data: TelegramBot.Message) => {
            switch (data.text) {
                case "–ò–≥—Ä–∞—Ç—å":
                    this.user.findOne({
                        where: {
                            telegram_id: data.from.id
                        }
                    }).then((user: any) => {
                        user.update({
                            state: 1
                        });

                        this.bot.sendMessage(data.from.id, "–ò–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –≤–µ–¥—É—â–µ–≥–æ, –æ–∂–∏–¥–∞–π—Ç–µ üòä");
                    });

                    break;
                case "–ù–∞—á–∞—Ç—å":
                    this.startGame();
                    break;
                default:
                    break;
            }
        });
    }

    public startGame() {
        let mafia_count = 0;
        let comissar = false;
        let doctor = false;

        this.user.findAll({
            where: {
                state: 1
            },
            order: sequelize.literal("RAND()")
        }).then((users: any) => {
            for (let user of users) {
                /**
                 * states: 0 - –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, 1 - –≤ –∏–≥—Ä–µ
                 * roles: 0 - –º–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å, 1 - –º–∞—Ñ–∏—è, 2 - –∫–æ–º–∏—Å—Å–∞—Ä, 3 - –≤—Ä–∞—á
                 */

                if (mafia_count < 2) {
                    user.update({
                        role: 1
                    });

                    mafia_count++;

                    this.bot.sendMessage(user.telegram_id, `${user.first_name}, –≤ —ç—Ç–æ–π –∏–≥—Ä–µ –≤—ã –º–∞—Ñ–∏—è!`);
                } else if (!comissar) {
                    user.update({
                        role: 2
                    });

                    comissar = true;

                    this.bot.sendMessage(user.telegram_id, `${user.first_name}, –≤ —ç—Ç–æ–π –∏–≥—Ä–µ –≤—ã –∫–æ–º–∏—Å—Å–∞—Ä!`);
                } else if (!doctor) {
                    user.update({
                        role: 3
                    });

                    doctor = true;

                    this.bot.sendMessage(user.telegram_id, `${user.first_name}, –≤ —ç—Ç–æ–π –∏–≥—Ä–µ –≤—ã –≤—Ä–∞—á!`);
                } else {
                    this.bot.sendMessage(user.telegram_id, `${user.first_name}, –≤ —ç—Ç–æ–π –∏–≥—Ä–µ –≤—ã –º–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å!`);
                }
            }
        });
    }

    public sendPlayers(text: string) {
        this.user.findAll({
            where: {
                state: 1
            }
        }).then((users: any) => {
            for (let user of users) {
                this.bot.sendMessage(user.telegram_id, text);
            }
        });
    }

}